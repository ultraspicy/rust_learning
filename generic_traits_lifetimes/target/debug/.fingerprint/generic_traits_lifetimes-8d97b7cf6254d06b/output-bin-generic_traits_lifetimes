{"message":"`&` without an explicit lifetime name cannot be used here","code":{"code":"E0637","explanation":"`'_` lifetime name or `&T` without an explicit lifetime name has been used\non illegal place.\n\nErroneous code example:\n\n```compile_fail,E0106,E0637\nfn underscore_lifetime<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n                     //^^ `'_` is a reserved lifetime name\n    if str1.len() > str2.len() {\n        str1\n    } else {\n        str2\n    }\n}\n\nfn and_without_explicit_lifetime<T>()\nwhere\n    T: Into<&u32>,\n          //^ `&` without an explicit lifetime name\n{\n}\n```\n\nFirst, `'_` cannot be used as a lifetime identifier in some places\nbecause it is a reserved for the anonymous lifetime. Second, `&T`\nwithout an explicit lifetime name cannot also be used in some places.\nTo fix them, use a lowercase letter such as `'a`, or a series\nof lowercase letters such as `'foo`. For more information about lifetime\nidentifier, see [the book][bk-no]. For more information on using\nthe anonymous lifetime in Rust 2018, see [the Rust 2018 blog post][blog-al].\n\nCorrected example:\n\n```\nfn underscore_lifetime<'a>(str1: &'a str, str2: &'a str) -> &'a str {\n    if str1.len() > str2.len() {\n        str1\n    } else {\n        str2\n    }\n}\n\nfn and_without_explicit_lifetime<'foo, T>()\nwhere\n    T: Into<&'foo u32>,\n{\n}\n```\n\n[bk-no]: https://doc.rust-lang.org/book/appendix-02-operators.html#non-operator-symbols\n[blog-al]: https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html#more-lifetime-elision-rules\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":965,"byte_end":966,"line_start":49,"line_end":49,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"impl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {","highlight_start":47,"highlight_end":48}],"label":"explicit lifetime name needed here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0637]\u001b[0m\u001b[0m\u001b[1m: `&` without an explicit lifetime name cannot be used here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexplicit lifetime name needed here\u001b[0m\n\n"}
{"message":"type annotations needed: cannot satisfy `<T as Mul>::Output == &'static T`","code":{"code":"E0284","explanation":"This error occurs when the compiler is unable to unambiguously infer the\nreturn type of a function or method which is generic on return type, such\nas the `collect` method for `Iterator`s.\n\nFor example:\n\n```compile_fail,E0284\nfn main() {\n    let n: u32 = 1;\n    let mut d: u64 = 2;\n    d = d + n.into();\n}\n```\n\nHere we have an addition of `d` and `n.into()`. Hence, `n.into()` can return\nany type `T` where `u64: Add<T>`. On the other hand, the `into` method can\nreturn any type where `u32: Into<T>`.\n\nThe author of this code probably wants `into()` to return a `u64`, but the\ncompiler can't be sure that there isn't another type `T` where both\n`u32: Into<T>` and `u64: Add<T>`.\n\nTo resolve this error, use a concrete type for the intermediate expression:\n\n```\nfn main() {\n    let n: u32 = 1;\n    let mut d: u64 = 2;\n    let m: u64 = n.into();\n    d = d + m;\n}\n```\n\nNote that the type of `v` can now be inferred from the type of `temp`.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":985,"byte_end":993,"line_start":49,"line_end":49,"column_start":67,"column_end":75,"is_primary":true,"text":[{"text":"impl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {","highlight_start":67,"highlight_end":75}],"label":"cannot satisfy `<T as Mul>::Output == &'static T`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `Distance` for `Point<T, U>`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":985,"byte_end":993,"line_start":49,"line_end":49,"column_start":67,"column_end":75,"is_primary":true,"text":[{"text":"impl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {","highlight_start":67,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":998,"byte_end":1009,"line_start":49,"line_end":49,"column_start":80,"column_end":91,"is_primary":true,"text":[{"text":"impl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {","highlight_start":80,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0284]\u001b[0m\u001b[0m\u001b[1m: type annotations needed: cannot satisfy `<T as Mul>::Output == &'static T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot satisfy `<T as Mul>::Output == &'static T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `Distance` for `Point<T, U>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the parameter type `T` may not live long enough","code":{"code":"E0310","explanation":"A parameter type is missing a lifetime constraint or has a lifetime that\ndoes not live long enough.\n\nErroneous code example:\n\n```compile_fail,E0310\n// This won't compile because T is not constrained to the static lifetime\n// the reference needs\nstruct Foo<T> {\n    foo: &'static T\n}\n```\n\nType parameters in type definitions have lifetimes associated with them that\nrepresent how long the data stored within them is guaranteed to live. This\nlifetime must be as long as the data needs to be alive, and missing the\nconstraint that denotes this will cause this error.\n\nThis will compile, because it has the constraint on the type parameter:\n\n```\nstruct Foo<T: 'static> {\n    foo: &'static T\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":956,"byte_end":967,"line_start":49,"line_end":49,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"impl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {","highlight_start":38,"highlight_end":49}],"label":"...so that the reference type `&'static T` does not outlive the data it points at","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider adding an explicit lifetime bound...","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":924,"byte_end":926,"line_start":49,"line_end":49,"column_start":6,"column_end":8,"is_primary":true,"text":[{"text":"impl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {","highlight_start":6,"highlight_end":8}],"label":null,"suggested_replacement":"T: 'static + ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0310]\u001b[0m\u001b[0m\u001b[1m: the parameter type `T` may not live long enough\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: num::Integer + std::ops::Mul<Output = &T>, U: num::Float> Distance for Point<T, U> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m...so that the reference type `&'static T` does not outlive the data it points at\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: consider adding an explicit lifetime bound...: `T: 'static +`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0284, E0310, E0637.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0284, E0310, E0637.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0284`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0284`.\u001b[0m\n"}
